parameters:
  - name: environmentName
    type: string
  - name: siteUrl
    type: string

stages:
  - stage: run_ui_tests_against_${{ parameters.environmentName }}
    jobs:
      - job: run_ui_tests

        workspace:
          clean: all

        variables:
          - name: SiteUrl
            value: "${{ parameters.siteUrl }}"

        steps:
          - pwsh: |
              $maxAttempts = 30  # 5 minutes with 10 second intervals
              $attempt = 0
              $url = "${{ parameters.siteUrl }}"
              
              Write-Host "Polling $url until it returns 200 status code..."
              
              do {
                  $attempt++
                  Write-Host "Attempt $attempt of $maxAttempts..."
                  
                  try {
                      $response = Invoke-WebRequest -Uri $url -Method Get -TimeoutSec 30 -UseBasicParsing
                      if ($response.StatusCode -eq 200) {
                          Write-Host "✅ Site is available! Status code: $($response.StatusCode)"
                          exit 0
                      }
                  }
                  catch {
                      Write-Host "⚠️ Request failed: $($_.Exception.Message)"
                  }
                  
                  if ($attempt -lt $maxAttempts) {
                      Write-Host "Waiting 10 seconds before next attempt..."
                      Start-Sleep -Seconds 10
                  }
              } while ($attempt -lt $maxAttempts)
              
              Write-Host "❌ Site did not become available within 5 minutes. Continuing with tests anyway..."
            displayName: "Wait for site to be available"

          - task: UseDotNet@2
            displayName: "Use .NET SDK 9.x"
            inputs:
              version: "9.x"

          - task: DotNetCoreCLI@2
            displayName: "Build the project - Release"
            inputs:
              command: "build"
              arguments: "--configuration Release"
              projects: "$(System.DefaultWorkingDirectory)/**/*.IntegrationTests.csproj"

          - task: DotNetCoreCLI@2
            displayName: "Install Playwright CLI tool"
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install --global Microsoft.Playwright.CLI'

          - script: playwright install --with-deps
            displayName: "Install Playwright browsers"
            workingDirectory: "$(System.DefaultWorkingDirectory)/src/MX.GeoLocation.Web.IntegrationTests"

          - task: DotNetCoreCLI@2
            displayName: "Run UI Tests"
            inputs:
              command: "test"
              arguments: "--no-build --configuration Release"
              publishTestResults: true
              projects: "$(System.DefaultWorkingDirectory)/**/*.IntegrationTests.csproj"
