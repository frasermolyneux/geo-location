parameters:
  - name: azureSubscription
    type: string
  - name: environment
    type: string
  - name: environmentName
    type: string
  - name: webAppsAzureSubscription
    type: string
  - name: webAppsEnvironment
    type: string
  - name: siteUrl
    type: string

stages:
  - stage: deploy_${{ parameters.environmentName }}
    jobs:
      - deployment: deploy_${{ parameters.environmentName }}
        environment: ${{ parameters.environment }}

        variables:
          - name: SITE_URL
            value: "${{ parameters.siteUrl }}"

        workspace:
          clean: all

        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: deploy_${{ parameters.environmentName }}_platform_bicep
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $deletedKeyVaults = az keyvault list-deleted --query '[].properties.vaultId' | ConvertFrom-Json
                      $isDeleted = $deletedKeyVaults | where {$_ -match "rg-platform-vault-${{ parameters.environmentName }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"}

                      $keyVaultCreateMode = "default"
                      if ($isDeleted -ne $null) {
                        # To allow the environments to be torn-down and re-created, the Key Vault Create Mode must be set to 'recover'.
                        $keyVaultCreateMode = "recover"
                      }

                      $deploymentName = "geolocation-platform-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)"
                      az deployment sub create `
                        --name $deploymentName `
                        --template-file bicep/platform.bicep `
                        --location $config.parameters.parLocation.value `
                        --parameters @params/platform.${{ parameters.environmentName }}.json `
                          parKeyVaultCreateMode=$keyVaultCreateMode

                - task: AzureCLI@2
                  displayName: CreateAppRegistrations
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      . "./scripts/CreateAppRegistration.ps1" `
                          -applicationName "geolocation-api-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" `
                          -appRoles "lookup-api-approles.json"

                - task: AzureCLI@2
                  displayName: CreateAppRegistrationsCredentials
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/platform.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $keyVaultName = az deployment sub show --name "geolocation-platform-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" --query properties.outputs.keyVaultName.value

                      . "./scripts/CreateAppRegistrationCredential.ps1" `
                        -keyVaultName $keyVaultName `
                        -applicationName "geolocation-api-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)" `
                        -secretPrefix "geolocation-api-${{ parameters.environmentName }}" `
                        -secretDisplayName 'publicwebapp'

                - task: AzureCLI@2
                  displayName: deploy_${{ parameters.environmentName }}_services_bicep
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    addSpnToEnvironment: true
                    inlineScript: |
                      $config = (Get-Content params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $deploymentName = "geolocation-services-${{ parameters.environmentName }}-$($config.parameters.parInstance.value)"
                      $resourceGroupName = "rg-geolocation-${{ parameters.environmentName }}-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)"

                      az deployment group create `
                        --name  $deploymentName `
                        --resource-group $resourceGroupName `
                        --template-file bicep/services.bicep `
                        --parameters @params/services.${{ parameters.environmentName }}.json

                - task: AzureCLI@2
                  name: deploy_outputs
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $deploymentOutput = (az deployment group show --name "geolocation-services-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
                        --resource-group "rg-geolocation-$($config.parameters.parEnvironment.value)-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)") | ConvertFrom-Json

                      echo "##vso[task.setvariable variable=webAppIdentityPrincipalId]$($deploymentOutput.properties.outputs.outWebAppIdentityPrincipalId.value)"
                      echo "##vso[task.setvariable variable=webAppName]$($deploymentOutput.properties.outputs.outWebAppName.value)"
                      echo "##vso[task.setvariable variable=webApiName]$($deploymentOutput.properties.outputs.outWebApiName.value)"

                      echo "##vso[task.setvariable variable=webAppsResourceGroupName]$($config.parameters.parStrategicServices.value.WebAppsResourceGroupName)"

                - task: AzureCLI@2
                  displayName: SetPublicWebAppPermissions
                  inputs:
                    azureSubscription: ${{ parameters.azureSubscription }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $config = (Get-Content params/services.${{ parameters.environmentName }}.json | ConvertFrom-Json)

                      $apiName = "geolocation-api-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)"
                      $apiId = (az ad app list --filter "displayName eq '$apiName'" --query '[].appId') | ConvertFrom-Json
                      $resourceId = (az ad sp list --filter "appId eq '$apiId'" --query '[0].id') | ConvertFrom-Json
                      $apiSpn = (az rest -m GET -u https://graph.microsoft.com/v1.0/servicePrincipals/$resourceId) | ConvertFrom-Json
                      $appRoleId = ($apiSpn.appRoles | Where-Object { $_.displayName -eq "LookupApiUser" }).id

                      $deploymentOutput = (az deployment group show --name "geolocation-services-$($config.parameters.parEnvironment.value)-$($config.parameters.parInstance.value)" `
                        --resource-group "rg-geolocation-$($config.parameters.parEnvironment.value)-$($config.parameters.parLocation.value)-$($config.parameters.parInstance.value)") | ConvertFrom-Json

                      $principalId = $deploymentOutput.properties.outputs.outWebAppIdentityPrincipalId.value
                      . "./scripts/GrantPrincipalAppRole.ps1" -principalId $principalId -resourceId $resourceId -appRoleId $appRoleId

                - download: current
                  artifact: lookup-webapi

                - download: current
                  artifact: public-webapp

                - task: AzureRmWebAppDeployment@4
                  retryCountOnTaskFailure: 3
                  inputs:
                    azureSubscription: ${{ parameters.webAppsAzureSubscription }}
                    webAppName: $(webApiName)
                    resourceGroupName: $(webAppsResourceGroupName)
                    packageForLinux: "$(Pipeline.Workspace)/lookup-webapi/lookup-webapi.zip"

                - task: AzureRmWebAppDeployment@4
                  retryCountOnTaskFailure: 3
                  inputs:
                    azureSubscription: ${{ parameters.webAppsAzureSubscription }}
                    webAppName: $(webAppName)
                    resourceGroupName: $(webAppsResourceGroupName)
                    packageForLinux: "$(Pipeline.Workspace)/public-webapp/public-webapp.zip"

            postRouteTraffic:
              steps:
                - checkout: self

                - pwsh: Invoke-WebRequest -Uri ${{ parameters.siteUrl }} -MaximumRetryCount 10 -RetryIntervalSec 5

                - task: UseDotNet@2
                  displayName: "Use .NET SDK 7.x"
                  inputs:
                    version: "7.x"

                - task: DotNetCoreCLI@2
                  displayName: "Build the project - Release"
                  inputs:
                    command: "build"
                    arguments: "--configuration Release"
                    projects: "$(System.DefaultWorkingDirectory)/**/*.IntegrationTests.csproj"

                - task: DotNetCoreCLI@2
                  displayName: "Run UI Tests"
                  inputs:
                    command: "test"
                    arguments: "--no-build --configuration Release"
                    publishTestResults: true
                    projects: "$(System.DefaultWorkingDirectory)/**/*.IntegrationTests.csproj"
